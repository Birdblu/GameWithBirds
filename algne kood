import pygame, sys
from pygame.locals import *
import random
pygame.init()

red = (175,0,0)
white = (255,255,255)
def Activity():
    for event in pygame.event.get((KEYDOWN, KEYUP, QUIT)):
        if event.type == QUIT:
            pygame.quit()
            sys.exit()
        elif event.type == KEYDOWN:
            continue
        return event.key
    return None

def makeTextObjs(text, font, tcolor):
    textSurface = font.render(text, True, tcolor)
    return textSurface, textSurface.get_rect()

def img(name, colorkey=None):
    image = pygame.image.load(name)
    image = image.convert()
    image.set_colorkey(transColor)
    return image, image.get_rect()

def msgSurface(text, textColor):
    Text = pygame.font.Font('freesansbold.ttf', 20)
    largeText = pygame.font.Font('freesansbold.ttf', 120)

    titleTextSurf, titleTextRect = makeTextObjs(text, largeText, textColor)
    titleTextRect.center = (int(800/2),int(586/2))
    ekraani_pind.blit(titleTextSurf, titleTextRect)

    typTextSurf, typTextRect = makeTextObjs('Press key to continue', Text, white)
    typTextRect.center = (int(800/2),int(586/2) + 120)
    ekraani_pind.blit(typTextSurf, typTextRect)
    pygame.display.update()

    while Activity() == None:
        for event in pygame.event.get([QUIT]):
            if event.type == QUIT:
                pygame.quit()
                sys.exit()
        pygame.display.update()

def PointsCounter(text, textCol):
    Text = pygame.font.Font('freesansbold.ttf', 20)
    titleTextSurf, titleTextRect = makeTextObjs('Points: ' + str(text),pygame.font.Font('freesansbold.ttf', 20), textCol)
    ekraani_pind.blit(titleTextSurf, titleTextRect)

    
    

def wind(direction):
    for i in linnud:
        i.direction =direction

class Jahimees(pygame.sprite.Sprite):
    def __init__(self):
        pygame.sprite.Sprite.__init__(self)
        self.image, self.rect = img("jahimees.png", -1)
        screen = pygame.display.get_surface()
        self.area = screen.get_rect()
        self.move = 10

    def liikumine(self):
        pos = self.rect.move((self.move, 0))
        if self.rect.left < self.area.left or self.rect.right > self.area.right:
            self.move = -self.move
            pos = self.rect.move((self.move, random.choice([10,20,30,50,90,-10,-30])))
            self.image = pygame.transform.flip(self.image, 1, 0)
        self.rect = pos

    
        

class Pesa:
    def __init__(self, image, x,y):
        self.x = x
        self.y = y
        self.image = image
        self.pos = image.get_rect().move(x, y) 
        
class Lind:
    def __init__(self, image, X,Y, speed, direction):
        self.x = X
        self.y = Y
        self.speed = speed
        self.image = image
        self.pos = image.get_rect().move(X, Y)
        self.direction = direction
        
    def imagevalik(self):
        if self.direction == "N":
            self.image = lind1
        elif self.direction == "W":
            self.image = lind2
        elif self.direction == "E":
            self.image = lind3
        elif self.direction == "S":
            self.image = lind4
    
    def move(self):
        if self.direction =="E" and self.pos.right<800:
            self.pos = self.pos.move(self.speed,0)
            self.x += self.speed
        if self.direction =="N" and self.pos.right<800:
            self.pos = self.pos.move(0,-self.speed)
            self.y -= self.speed
        if self.direction =="S" and self.pos.right<800:
            self.pos = self.pos.move(0,self.speed)
            self.y +=self.speed
        if self.direction =="W" and self.pos.left>0:
            self.pos = self.pos.move(-1*self.speed,0)
            self.x -= self.speed

def servatest(kontrollitavad,W,H,remover=[]):
    for i in kontrollitavad:
        if i.x<0 or i.x+50>=W or i.y<0 or i.y+50>=H:
            remover.append(i)
    
    for j in remover:
        try:
            kontrollitavad.remove(j)
            if kontrollitavad == []:
                msgSurface('Game over', red)                
        except: continue
    del remover
    return kontrollitavad
    
#bird_speed = 3 #lindude kiirus

ekraani_pind = pygame.display.set_mode( (800, 586) )
pygame.display.set_caption("Mäng lindudega")
transColor = pygame.Color(255, 255, 255)
lind1 = pygame.image.load("lind.png").convert()
lind1.set_colorkey(transColor)
lind2 = pygame.image.load("lind2.png").convert()
lind2.set_colorkey(transColor)
lind3 = pygame.image.load("lind3.png").convert()
lind3.set_colorkey(transColor)
lind4 = pygame.image.load("lind4.png").convert()
lind4.set_colorkey(transColor)
taust = pygame.image.load("taust.jpg").convert()
ekraani_pind.blit(taust, (0, 0))
pesa = pygame.image.load('pesa.png').convert()
pesa.set_colorkey(transColor)
s = Pesa(pesa, 500,140)
j = Jahimees()
sprites = pygame.sprite.Group((j))

linnud = []
###
"""for i in range(3):
    a = Lind(random.choice([lind1,lind2,lind3,lind4]), random.choice([10,50,150]), random.choice([100,300,500]), bird_speed, "W")
    linnud.append(a)"""

def paigutaja(obj_arv, sobiv_ala,pildid,keelatud_ala =[]):#sobiv_ala =[[xmin,xmax],[ymin,ymax]]
    ##Sobiv ala tuleb arvestada pildi suurusega
    global linnud
    ### x ja y paigutus
    while obj_arv>0:
        x = random.randint(sobiv_ala[0][0],sobiv_ala[0][1])
        y = random.randint(sobiv_ala[1][0],sobiv_ala[1][1])
        R = pygame.Rect(x,y,100,100)
        for li in linnud:
            if not(abs(x- li.x)<600) and (abs(y -li.y)<400):#Controls that birds don't spawn too far
                continue
        for i in keelatud_ala:
            if type(i)== "pygame.Rect":
                if R.colliderect(i):
                    continue
            else:
                L = pygame.Rect(i.x,i.y,100,100)
                if R.colliderect(L):
                    continue
        break
    if x < 50:
        if y<100:
            suund = "S"
        elif y>=100 and y< (sobiv_ala[1][1]- (sobiv_ala[1][1]/8)):
            suund = "E"
        else:
            suund = random.choice(["E","N"])
            
    if x>=50 and x < (sobiv_ala[0][1]-(sobiv_ala[0][1]/8)):
        if y<100:
            suund = "S"
        elif y>=100 and y< (sobiv_ala[1][1]- (sobiv_ala[1][1]/8) ):
            suund = random.choice(["E","W","S"])
        else:
            suund = random.choice(["E","W","N"])
    else:
        if y<100:
            suund = random.choice(["W","S"])
        elif y>=100 and y< (sobiv_ala[1][1]- (sobiv_ala[1][1]/8)):
            suund = random.choice(["W","N","S"])
        else:
            suund = random.choice(["W","N"])
    
    bird_speed = random.randint(3,5)
    
    ### Linnu loomine
    pilt = random.choice(pildid)
    #print(pilt,x,y,bird_speed,suund)
    linnud.append(Lind(pilt,x,y,bird_speed,suund))
    keelatud_ala.append(R)
    if obj_arv >1:
        paigutaja(obj_arv-1,sobiv_ala,pildid,keelatud_ala)
    del keelatud_ala, sobiv_ala
####
paigutaja(3,[[1,699],[1,599]],[lind1,lind2,lind3,lind4],[s])#3 lindu, s-Pesa



k = pygame
counter = 0
while True:
    clock = pygame.time.Clock()
    FRAMES_PER_SECOND = 60
    deltat = clock.tick(FRAMES_PER_SECOND)
    event = pygame.event.poll()
    if event.type == pygame.QUIT:
        break
    if event.type == pygame.KEYDOWN:
        if event.key == k.K_UP:
            wind("N")
        elif event.key==k.K_DOWN:
            wind("S")
        elif event.key == k.K_RIGHT:
            wind("E")
        elif event.key == k.K_LEFT:
            wind("W")
    j.liikumine()
            
    ekraani_pind.blit(taust, (0, 0)) #Tähtis
    sprites.draw(ekraani_pind)
    ekraani_pind.blit(s.image, s.pos)
    
    for element in linnud:
        element.imagevalik()
        element.move()
        ekraani_pind.blit(element.image, element.pos)
        if j.rect.colliderect(element.pos):
            linnud.remove(element)
       
        if s.pos.colliderect(element.pos):
            linnud.remove(element)
            paigutaja(1,[[1,699],[1,599]],[lind1,lind2,lind3,lind4],[s])
            counter += 1
        if linnud == []:
            msgSurface('Game over', red)
    PointsCounter(counter, white)

    linnud = servatest(linnud,801,601)
    sprites.update()
    pygame.display.update()
    pygame.time.delay(100)
pygame.quit()
