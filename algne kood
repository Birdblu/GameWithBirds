import pygame, sys
from pygame.locals import *
from decimal import *
import random
pygame.init()
pygame.mixer.init()

heli = pygame.mixer.music.load("v1.mp3")
pygame.mixer.music.play(-1)
got_shot = pygame.mixer.Sound("got_shot.ogg")
red = (175,0,0)
white = (255,255,255)
def Activity():
    for event in pygame.event.get((KEYDOWN, KEYUP, QUIT)):
        if event.type == QUIT:
            pygame.quit()
            sys.exit()
        elif event.type == KEYDOWN:
            continue
        return event.key
    return None

def makeTextObjs(text, font, tcolor):
    textSurface = font.render(text, True, tcolor)
    return textSurface, textSurface.get_rect()

def img(name, colorkey=None):
    image = pygame.image.load(name)
    image = image.convert()
    image.set_colorkey(transColor)
    return image, image.get_rect()

def msgSurface(text, textColor):
    Text = pygame.font.Font('freesansbold.ttf', 20)
    largeText = pygame.font.Font('freesansbold.ttf', 120)

    titleTextSurf, titleTextRect = makeTextObjs(text, largeText, textColor)
    titleTextRect.center = (int(800/2),int(586/2))
    screen.blit(titleTextSurf, titleTextRect)

    typTextSurf, typTextRect = makeTextObjs('Press key to continue', Text, white)
    typTextRect.center = (int(800/2),int(586/2) + 120)
    screen.blit(typTextSurf, typTextRect)
    pygame.display.update()

    while Activity() == None:
        for event in pygame.event.get([QUIT]):
            if event.type == QUIT:
                pygame.quit()
                sys.exit()
        pygame.display.update()

def PointsCounter(text, textCol):
    Text = pygame.font.Font('freesansbold.ttf', 20)
    titleTextSurf, titleTextRect = makeTextObjs('Points: ' + str(text),pygame.font.Font('freesansbold.ttf', 20), textCol)
    screen.blit(titleTextSurf, titleTextRect)

def TimeCounter(text, textCol):
    Text = pygame.font.Font('freesansbold.ttf', 20)
    titleTextSurf, titleTextRect = makeTextObjs('Time left: ' + str(text),pygame.font.Font('freesansbold.ttf', 20), textCol)
    titleTextRect.center = (int(720),int(10))
    screen.blit(titleTextSurf, titleTextRect)
                                    

def wind(direction):
    for i in birds:
        i.direction =direction

class Hunter(pygame.sprite.Sprite):
    def __init__(self):
        pygame.sprite.Sprite.__init__(self)
        self.image, self.rect = img("hunter.png", -1)
        screen = pygame.display.get_surface()
        self.area = screen.get_rect()
        self.move = 10

    def movement(self):
        pos = self.rect.move((self.move, 0))
        if self.rect.left < self.area.left or self.rect.right > self.area.right:
            self.move = -self.move
            if self.rect.y >= 486:
                pos = sef.rect.move((self.move, -20))
            elif self.rect.y <= 100:
                pos = self.rect.move((self.move, 20))
            else:
                pos = self.rect.move((self.move, random.choice([10,20,30,50,90,-10,-30])))
            self.image = pygame.transform.flip(self.image, 1, 0)
        self.rect = pos

class Tree:
    def __init__(self, image, x,y):
        self.x = x
        self.y = y
        self.image = image
        self.pos = image.get_rect().move(x, y) 
    
class Nest:
    def __init__(self, image, x,y):
        self.x = x
        self.y = y
        self.image = image
        self.pos = image.get_rect().move(x, y) 
        
class Bird:
    def __init__(self, image, X,Y, speed, direction):
        self.x = X
        self.y = Y
        self.speed = speed
        self.image = image
        self.pos = image.get_rect().move(X, Y)
        self.direction = direction
        
    def ImgChoice(self):
        if self.direction == "N":
            self.image = bird1
        elif self.direction == "W":
            self.image = bird2
        elif self.direction == "E":
            self.image = bird3
        elif self.direction == "S":
            self.image = bird4
    
    def move(self):
        if self.direction =="E" and self.pos.right<800:
            self.pos = self.pos.move(self.speed,0)
            self.x += self.speed
        if self.direction =="N" and self.pos.right<800:
            self.pos = self.pos.move(0,-self.speed)
            self.y -= self.speed
        if self.direction =="S" and self.pos.right<800:
            self.pos = self.pos.move(0,self.speed)
            self.y +=self.speed
        if self.direction =="W" and self.pos.left>0:
            self.pos = self.pos.move(-1*self.speed,0)
            self.x -= self.speed

def EdgeTest(NaughtyBirds,W,H,remover=[]):
    for i in NaughtyBirds:
        if i.x<0 or i.x+50>=W or i.y<0 or i.y+50>=H:
            remover.append(i)
    
    for j in remover:
        try:
            NaughtyBirds.remove(j)
            if NaughtyBirds == []:
                msgSurface('Game over', red)                
        except: continue
    del remover
    return NaughtyBirds
    
#bird_speed = 3 #bird speed

screen = pygame.display.set_mode( (800, 586) )
pygame.display.set_caption("Bird Game")
transColor = pygame.Color(255, 255, 255)
bird1 = pygame.image.load("bird.png").convert()
bird1.set_colorkey(transColor)
bird2 = pygame.image.load("bird2.png").convert()
bird2.set_colorkey(transColor)
bird3 = pygame.image.load("bird3.png").convert()
bird3.set_colorkey(transColor)
bird4 = pygame.image.load("bird4.png").convert()
bird4.set_colorkey(transColor)
background = pygame.image.load("background.jpg").convert()
screen.blit(background, (0, 0))
nest = pygame.image.load('nest.png').convert()
nest.set_colorkey(transColor)
tree1 = pygame.image.load("tree1.png").convert()
tree1.set_colorkey(transColor)
tree2 = pygame.image.load("tree2.png").convert()
tree2.set_colorkey(transColor)
tree3 = pygame.image.load("tree3.png").convert()
tree3.set_colorkey(transColor)

FirstTree = Tree(tree1, 500,120)
SecondTree = Tree(tree2, 70,120)
ThirdTree = Tree(tree3, 300,325)
s = Nest(nest, 550,140)
hunter = Hunter()
sprites = pygame.sprite.Group(hunter)

birds = []
###
"""for i in range(3):
    a = Bird(random.choice([bird1,bird2,bird3,bird4]), random.choice([10,50,150]), random.choice([100,300,500]), bird_speed, "W")
    birds.append(a)"""

def ObjPosition(ObjAmount, NotOffLimitsArea,pictures,OffLimits =[]):#NotOffLimitsArea =[[xmin,xmax],[ymin,ymax]]
    ##Sobiv ala tuleb arvestada pildi suurusega
    global birds
    ### x ja y paigutus
    while ObjAmount>0:
        x = random.randint(NotOffLimitsArea[0][0],NotOffLimitsArea[0][1])
        y = random.randint(NotOffLimitsArea[1][0],NotOffLimitsArea[1][1])
        R = pygame.Rect(x,y,100,100)

        for i in OffLimits:
            if type(i)== "pygame.Rect":
                if R.colliderect(i):
                    continue
            else:
                L = pygame.Rect(i.x,i.y,100,100)
                if R.colliderect(L):
                    continue
        break
    if x < 50:
        if y<100:
            BirdDirection = "S"
        elif y>=100 and y< (NotOffLimitsArea[1][1]- (NotOffLimitsArea[1][1]/8)):
            BirdDirection = "E"
        else:
            BirdDirection = random.choice(["E","N"])
            
    if x>=50 and x < (NotOffLimitsArea[0][1]-(NotOffLimitsArea[0][1]/8)):
        if y<100:
            BirdDirection = "S"
        elif y>=100 and y< (NotOffLimitsArea[1][1]- (NotOffLimitsArea[1][1]/8) ):
            BirdDirection = random.choice(["E","W","S"])
        else:
            BirdDirection = random.choice(["E","W","N"])
    else:
        if y<100:
            BirdDirection = random.choice(["W","S"])
        elif y>=100 and y< (NotOffLimitsArea[1][1]- (NotOffLimitsArea[1][1]/8)):
            BirdDirection = random.choice(["W","N","S"])
        else:
            BirdDirection = random.choice(["W","N"])
    
    bird_speed = random.randint(3,5)
    print(3)
    ### Linnu loomine
    picture = random.choice(pictures)
    print(picture,x,y,bird_speed,BirdDirection)
    birds.append(Bird(picture,x,y,bird_speed,BirdDirection))
    OffLimits.append(R)
    if ObjAmount >1:
        ObjPosition(ObjAmount-1,NotOffLimitsArea,pictures,OffLimits)
    del OffLimits, NotOffLimitsArea
####
ObjPosition(3,[[1,799],[1,585]],[bird1,bird2,bird3,bird4],[s])#3 bird, s-nest

getcontext().prec = 3
timeCounter = 15
k = pygame
counter = 0
while True:
    clock = pygame.time.Clock()
    FPS = 60
    deltat = clock.tick(FPS)
    event = pygame.event.poll()

    if event.type == pygame.QUIT:
        break
    if event.type == pygame.KEYDOWN:
        if event.key == k.K_UP:
            wind("N")
        elif event.key==k.K_DOWN:
            wind("S")
        elif event.key == k.K_RIGHT:
            wind("E")
        elif event.key == k.K_LEFT:
            wind("W")

    hunter.movement()
    timeCounter = Decimal(timeCounter - Decimal(1/10))
            
    screen.blit(background, (0, 0)) #TÃ¤htis
    sprites.draw(screen)
    screen.blit(FirstTree.image, FirstTree.pos)
    screen.blit(SecondTree.image, SecondTree.pos)
    screen.blit(ThirdTree.image, ThirdTree.pos)
    screen.blit(s.image, s.pos)
    
    for element in birds:
        element.ImgChoice()
        element.move()
        screen.blit(element.image, element.pos)
        if hunter.rect.colliderect(element.pos):  #The birds are safe above the tree/on the tree
            if not FirstTree.pos.colliderect(element.pos):
                if not SecondTree.pos.colliderect(element.pos):
                    if not ThirdTree.pos.colliderect(element.pos):
                        birds.remove(element)
                        got_shot.play()
       
        if s.pos.colliderect(element.pos):
            birds.remove(element)
            ObjPosition(1,[[1,799],[1,585]],[bird1,bird2,bird3,bird4],[s])
            counter += 1
            timeCounter = 13
        if birds == []:
            msgSurface('Game over', red)
            
    if timeCounter > 5:
        TimeCounter(timeCounter, white)
    else:
        TimeCounter(timeCounter, red)
    if timeCounter <= 0:
        msgSurface('Game over', red)
        
    PointsCounter(counter, white)

    birds = EdgeTest(birds,801,587)
    sprites.update()
    pygame.display.update()
    pygame.time.delay(100)
pygame.quit()
pygame.mixer.quit()
