import pygame, sys
from pygame.locals import *
from decimal import *
import random
pygame.init()
pygame.mixer.init()

heli = pygame.mixer.music.load("v1.mp3")
pygame.mixer.music.play(-1)
got_shot = pygame.mixer.Sound("got_shot.ogg")
red = (175,0,0)
red2 = (225,0,0)
white = (255,255,255)
black = (0,0,0)
color = (0,0,200)
green = (0,225,0)
light_green = (0,255,0)
light_red = (255,0,0)

def quitgame():
    pygame.quit()
    quit()
   
def button(buttonText,x,y,widith,height,noTouchCol,TouchCol,action=None):
    mouse = pygame.mouse.get_pos()
    mouse_click = pygame.mouse.get_pressed()                        
    if x + widith> mouse[0] > x and y + height > mouse[1] > y:
        pygame.draw.rect(screen, TouchCol,(x,y,widith,height))
        if mouse_click[0] == 1 and action != None:
            action()
    else:
        pygame.draw.rect(screen, noTouchCol,(x,y,widith,height))

    smallText = pygame.font.Font("freesansbold.ttf",20)
    textSurf, textRect = makeTextObjs(buttonText,smallText,black)
    textRect.center = ( (x + (widith//2)), y + (height//2) )
    screen.blit(textSurf,textRect)

def intro_screen():
    Start_screen = True
    while Start_screen:
        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                pygame.quit()
                quit()

                
        IntroBackground = pygame.image.load("BirdIntro.png")
        screen.blit(IntroBackground, (0, 0))
        largeText = pygame.font.Font('freesansbold.ttf', 40)
        titleTextSurf, titleTextRect = makeTextObjs('A game with birds', largeText, color)
        titleTextRect.center = (int(800/2),160)
        screen.blit(titleTextSurf, titleTextRect)

        button("Play",350,250,100,50,green,light_green,game_loop)
        button("Quit",350,375,100,50,red,red2,quitgame)
        

        pygame.display.update()
        clock.tick(60)
        
            
def Game_over():
    msgSurface('Game over', red)
    global bird_speed
    bird_speed = random.randint(3,5)
    pygame.time.delay(1000)
    intro_screen()
    

def makeTextObjs(text, font, tcolor):
    textSurface = font.render(text, True, tcolor)
    return textSurface, textSurface.get_rect()

def img(name, colorkey=None):
    image = pygame.image.load(name)
    image = image.convert()
    image.set_colorkey(transColor)
    return image, image.get_rect()

def msgSurface(text, textColor):
    Text = pygame.font.Font('freesansbold.ttf', 20)
    largeText = pygame.font.Font('freesansbold.ttf', 120)

    titleTextSurf, titleTextRect = makeTextObjs(text, largeText, textColor)
    titleTextRect.center = (int(800/2),int(586/2))
    screen.blit(titleTextSurf, titleTextRect)
    pygame.display.update()


def PointsCounter(text, textCol):
    Text = pygame.font.Font('freesansbold.ttf', 20)
    titleTextSurf, titleTextRect = makeTextObjs('Points: ' + str(text),pygame.font.Font('freesansbold.ttf', 20), textCol)
    screen.blit(titleTextSurf, titleTextRect)

def TimeCounter(text, textCol):
    Text = pygame.font.Font('freesansbold.ttf', 20)
    titleTextSurf, titleTextRect = makeTextObjs('Time left: ' + str(text),pygame.font.Font('freesansbold.ttf', 20), textCol)
    titleTextRect.center = (int(720),int(10))
    screen.blit(titleTextSurf, titleTextRect)
                                    

def wind(direction):
    for i in birds:
        i.direction =direction

class Hunter(pygame.sprite.Sprite):
    def __init__(self):
        pygame.sprite.Sprite.__init__(self)
        self.image, self.rect = img("hunter.png", -1)
        screen = pygame.display.get_surface()
        self.area = screen.get_rect()
        self.move = 10

    def movement(self):
        pos = self.rect.move((self.move, 0))
        if self.rect.left < self.area.left or self.rect.right > self.area.right:
            self.move = -self.move
            if self.rect.y >= 486:
                pos = sef.rect.move((self.move, -20))
            elif self.rect.y <= 100:
                pos = self.rect.move((self.move, 20))
            else:
                pos = self.rect.move((self.move, random.choice([10,20,30,50,90,-10,-30])))
            self.image = pygame.transform.flip(self.image, 1, 0)
        self.rect = pos

class Tree:
    def __init__(self, image, x,y):
        self.x = x
        self.y = y
        self.image = image
        self.pos = image.get_rect().move(x, y) 
    
class Nest:
    def __init__(self, image, x,y):
        self.x = x
        self.y = y
        self.image = image
        self.pos = image.get_rect().move(x, y) 
        
class Bird:
    def __init__(self, image, X,Y, speed, direction):
        self.x = X
        self.y = Y
        self.speed = speed
        self.image = image
        self.pos = image.get_rect().move(X, Y)
        self.direction = direction
        
    def ImgChoice(self):
        if self.direction == "N":
            self.image = bird1
        elif self.direction == "W":
            self.image = bird2
        elif self.direction == "E":
            self.image = bird3
        elif self.direction == "S":
            self.image = bird4
    
    def move(self):
        if self.direction =="E":
            self.pos = self.pos.move(self.speed,0)
            self.x += self.speed
        if self.direction =="N":
            self.pos = self.pos.move(0,-self.speed)
            self.y -= self.speed
        if self.direction =="S":
            self.pos = self.pos.move(0,self.speed)
            self.y +=self.speed
        if self.direction =="W":# and self.pos.left>0:
            self.pos = self.pos.move(-self.speed,0)
            self.x -= self.speed

def EdgeTest(NaughtyBirds,W,H,remover=[]):
    for i in NaughtyBirds:
        if i.x<0 or i.x+50>=W or i.y<0 or i.y+50>=H:
            remover.append(i)
        if (i.direction=="S"or i.direction=="N") and i.x+100>=W:
            remover.append(i)        
    for j in remover:
        try:
            NaughtyBirds.remove(j)
            if NaughtyBirds == []:
                Game_over()
        except: continue
    remover[:] = []
    return NaughtyBirds
    
screen = pygame.display.set_mode( (800, 586) )
pygame.display.set_caption("Bird Game")
transColor = pygame.Color(255, 255, 255)
bird1 = pygame.image.load("bird.png")
bird2 = pygame.image.load("bird2.png")
bird3 = pygame.image.load("bird3.png")
bird4 = pygame.image.load("bird4.png")
background = pygame.image.load("background.jpg")
screen.blit(background, (0, 0))
nest = pygame.image.load('nest.png')
tree1 = pygame.image.load("tree1.png")
tree2 = pygame.image.load("tree2.png")
tree3 = pygame.image.load("tree3.png")

FirstTree = Tree(tree1, 500,120)
SecondTree = Tree(tree2, 70,120)
ThirdTree = Tree(tree3, 300,325)

s = Nest(nest, 550,140)
hunter = Hunter()
sprites = pygame.sprite.Group(hunter)

birds = []

bird_speed = random.randint(3,5)

def ObjPosition(ObjAmount, NotOffLimitsArea,pictures,OffLimits =[]):#NotOffLimitsArea =[[xmin,xmax],[ymin,ymax]]
    global birds
    ### x and y positioning
    while ObjAmount>0:
        x = random.randint(NotOffLimitsArea[0][0],NotOffLimitsArea[0][1])
        y = random.randint(NotOffLimitsArea[1][0],NotOffLimitsArea[1][1])
        R = pygame.Rect(x,y,100,100)

        for i in OffLimits:
            if type(i)== "pygame.Rect":
                if R.colliderect(i):
                    continue
            else:
                L = pygame.Rect(i.x,i.y,100,100)
                if R.colliderect(L):
                    continue
        break
    
    if x < 50:
        if y<100:
            BirdDirection = "S"
        elif y>=100 and y< (NotOffLimitsArea[1][1]- (NotOffLimitsArea[1][1]/8)):
            BirdDirection = "E"
        else:
            BirdDirection = random.choice(["E","N"])
            
    if x>=50 and x < (NotOffLimitsArea[0][1]-(NotOffLimitsArea[0][1]/8)):
        if y<100:
            BirdDirection = "S"
        elif y>=100 and y< (NotOffLimitsArea[1][1]- (NotOffLimitsArea[1][1]/8) ):
            BirdDirection = random.choice(["E","W","S"])
        else:
            BirdDirection = random.choice(["E","W","N"])
    else:
        if y<100:
            BirdDirection = random.choice(["W","S"])
        elif y>=100 and y< (NotOffLimitsArea[1][1]- (NotOffLimitsArea[1][1]/8)):
            BirdDirection = random.choice(["W","N","S"])
        else:
            BirdDirection = random.choice(["W","N"])
    
    ### Bird generating
    picture = random.choice(pictures)
    global bird_speed
    birds.append(Bird(picture,x,y,bird_speed,BirdDirection))
    OffLimits.append(R)
    if ObjAmount >1:
        ObjPosition(ObjAmount-1,NotOffLimitsArea,pictures,OffLimits)
    del OffLimits, NotOffLimitsArea



clock = pygame.time.Clock()
FPS = 60
bird_checker = []

def game_loop():
    ObjPosition(3,[[100,599],[100,500]],[bird1,bird2,bird3,bird4],[s, hunter.rect])#3 bird, s-nest
    getcontext().prec = 3
    timeCounter = 15
    k = pygame
    counter = 0

    while True:
        event = pygame.event.poll()

        if event.type == pygame.QUIT:
            break
        if event.type == pygame.KEYDOWN:
            if event.key == k.K_UP:
                wind("N")
            elif event.key==k.K_DOWN:
                wind("S")
            elif event.key == k.K_RIGHT:
                wind("E")
            elif event.key == k.K_LEFT:
                wind("W")

        hunter.movement()
        timeCounter = Decimal(timeCounter - Decimal(1/10))
                
        screen.blit(background, (0, 0))
        sprites.draw(screen)
        screen.blit(FirstTree.image, FirstTree.pos)
        screen.blit(SecondTree.image, SecondTree.pos)
        screen.blit(ThirdTree.image, ThirdTree.pos)
        screen.blit(s.image, s.pos)

        global birds
        for element in birds:
            element.ImgChoice()
            element.move()
            screen.blit(element.image, element.pos)
            if hunter.rect.colliderect(element.pos):  #The birds are safe above the tree/on the tree
                if not FirstTree.pos.colliderect(element.pos):
                    if not SecondTree.pos.colliderect(element.pos):
                        if not ThirdTree.pos.colliderect(element.pos):
                            if timeCounter < 11:
                                birds.remove(element)
                                got_shot.play()
           
            if s.pos.colliderect(element.pos):
                birds.remove(element)
                ObjPosition(1,[[100,599],[100,500]],[bird1,bird2,bird3,bird4],[s,hunter.rect])
                counter += 1
                global bird_speed
                bird_speed += 3
                timeCounter = 13
            if birds == []:
                msgSurface('Game over', red)
                Game_over()
                
        if timeCounter > 5:
            TimeCounter(timeCounter, white)
        else:
            TimeCounter(timeCounter, red)
        if timeCounter <= 0:
            msgSurface('Game over', red)
            Game_over()
            
        PointsCounter(counter, white)

        birds = EdgeTest(birds,800,575)
        sprites.update()
        pygame.display.update()
        clock.tick(FPS)
        pygame.time.delay(100)
intro_screen()
pygame.quit()
pygame.mixer.quit()
quit()
